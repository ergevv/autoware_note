<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Essential parameters -->
  <arg name="map_path" description="point cloud and lanelet2 map directory path"/>
  <arg name="vehicle_model" default="sample_vehicle" description="vehicle model name"/>
  <arg name="sensor_model" default="sample_sensor_kit" description="sensor model name"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="data_path" default="$(env HOME)/autoware_data" description="packages data and artifacts directory path"/>

  <!-- launch module preset -->
  <arg name="planning_module_preset" default="default" description="planning module preset"/>
  <arg name="control_module_preset" default="default" description="control module preset"/>

  <!-- Optional parameters -->
  <!-- Modules to be launched -->
  <arg name="launch_vehicle" default="true" description="launch vehicle"/>
  <arg name="launch_system" default="true" description="launch system"/>
  <arg name="launch_map" default="true" description="launch map"/>
  <arg name="launch_sensing" default="true" description="launch sensing"/>
  <arg name="launch_sensing_driver" default="true" description="launch sensing driver"/>
  <arg name="launch_localization" default="true" description="launch localization"/>
  <arg name="launch_perception" default="true" description="launch perception"/>
  <arg name="launch_planning" default="true" description="launch planning"/>
  <arg name="launch_control" default="true" description="launch control"/>
  <arg name="launch_api" default="true" description="launch api"/>
  <!-- Global parameters -->
  <arg name="use_sim_time" default="false" description="use_sim_time"/>
  <!-- Vehicle -->
  <arg name="vehicle_id" default="$(env VEHICLE_ID default)" description="vehicle specific ID"/>
  <arg name="launch_vehicle_interface" default="true" description="launch vehicle interface"/>
  <!-- Control -->
  <arg name="check_external_emergency_heartbeat" default="false"/>
  <!-- Map -->
  <arg name="lanelet2_map_file" default="lanelet2_map.osm" description="lanelet2 map file name"/>
  <arg name="pointcloud_map_file" default="pointcloud_map.pcd" description="pointcloud map file name"/>
  <!-- System -->
  <arg name="system_run_mode" default="online" description="run mode in system"/>
  <arg name="launch_system_monitor" default="true" description="launch system monitor"/>
  <arg name="launch_dummy_diag_publisher" default="false" description="launch dummy diag publisher"/>
  <arg name="diagnostic_graph_aggregator_graph_path" default="$(find-pkg-share autoware_launch)/config/system/diagnostics/autoware-main.yaml" description="diagnostic graph config"/>
  <!-- Tools -->
  <arg name="rviz" default="true" description="launch rviz"/>
  <arg name="rviz_config_name" default="autoware.rviz" description="rviz config name"/>
  <arg name="rviz_config" default="$(find-pkg-share autoware_launch)/rviz/$(var rviz_config_name)" description="rviz config path"/>
  <arg name="rviz_respawn" default="true"/>
  <!-- Perception -->
  <arg name="perception_mode" default="lidar" description="select perception mode. camera_lidar_radar_fusion, camera_lidar_fusion, lidar_radar_fusion, lidar, radar"/>
  <arg name="traffic_light_recognition/use_high_accuracy_detection" default="true" description="enable to use high accuracy detection for traffic light recognition"/>
  <!-- Auto mode setting-->
  <arg name="enable_all_modules_auto_mode" default="false" description="enable all module's auto mode"/>
  <arg name="is_simulation" default="false" description="Autoware's behavior will change depending on whether this is a simulation or not."/>

  <!-- Global parameters -->
  <!-- 通过特定的python文件生成全局变量 -->
  <group scoped="false">
    <include file="$(find-pkg-share autoware_global_parameter_loader)/launch/global_params.launch.py">
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>

  <!-- Pointcloud container -->
  <!-- 通过特定的python文件生成全局变量 -->
  <include file="$(find-pkg-share autoware_launch)/launch/pointcloud_container.launch.py">
    <arg name="use_multithread" value="true"/>
    <arg name="container_name" value="$(var pointcloud_container_name)"/>
  </include>

  <!-- Vehicle -->
  <!-- 加载车辆模型并发布车辆信息 -->
  <!-- 加载车辆控制模块，仿真sample_vehicle下没有实现控制，待修改 -->
  <!-- /home/developer/autoware/autoware_devel/src/universe/autoware_universe/launch/tier4_vehicle_launch/launch/vehicle.launch.xml -->
  <group if="$(var launch_vehicle)">
    <include file="$(find-pkg-share tier4_vehicle_launch)/launch/vehicle.launch.xml">
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
      <arg name="sensor_model" value="$(var sensor_model)"/>
      <arg name="vehicle_id" value="$(var vehicle_id)"/>
      <arg name="launch_vehicle_interface" value="$(var launch_vehicle_interface)"/>
      <arg name="config_dir" value="$(find-pkg-share $(var sensor_model)_description)/config"/>
      <arg name="raw_vehicle_cmd_converter_param_path" value="$(find-pkg-share autoware_launch)/config/vehicle/raw_vehicle_cmd_converter/raw_vehicle_cmd_converter.param.yaml"/>
    </include>
  </group>

  <!-- System -->
  <!-- 读取参数，并启动logging_node可执行文件从而加载共享库${PROJECT_NAME}_tools ，实例化autoware::diagnostic_graph_utils::LoggingNode类，logging_diag_graph节点 -->
  <group if="$(var launch_system)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_system_component.launch.xml"/>
  </group>

  <!-- Map -->
  <!-- 实例化了四个类PointCloudMapLoaderNode、Lanelet2MapLoaderNode、Lanelet2MapVisualizationNode、VectorMapTFGeneratorNode
  加载python脚本：/home/developer/autoware/autoware_devel/src/core/autoware_core/map/autoware_map_loader/script/map_hash_generator
   注册地图投影加载器：/home/developer/autoware/autoware_devel/src/core/autoware_core/map/autoware_map_projection_loader/src/map_projection_loader.cpp-->

  <group if="$(var launch_map)">
  <!-- 作用域继承：子 launch 文件可以访问父 launch 文件中声明的所有参数 -->
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_map_component.launch.xml"/>
  </group>

  <!-- Sensing -->
  <!-- 加载车辆信息global_params.launch.py
  多线程模式和创建点云容器pointcloud_container.launch.py
  imu、lidar、gnss、Vehicle Velocity Converter
  /home/developer/autoware/autoware_devel/src/launcher/autoware_launch/sensor_kit/sample_sensor_kit_launch/sample_sensor_kit_launch/launch/sensing.launch.xml -->
  <group if="$(var launch_sensing)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_sensing_component.launch.xml">
    <!-- 使用arg显式传递参数 -->
      <arg name="pointcloud_container_name" value="$(var pointcloud_container_name)"/>
    </include>
  </group>

  <!-- Localization -->
  <group if="$(var launch_localization)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_localization_component.launch.xml"/>
  </group>

  <!-- Perception -->
  <group if="$(var launch_perception)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_perception_component.launch.xml">
      <arg name="data_path" value="$(var data_path)"/>
      <arg name="pointcloud_container_name" value="$(var pointcloud_container_name)"/>
    </include>
  </group>

  <!-- Planning -->
  <group if="$(var launch_planning)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_planning_component.launch.xml">
      <arg name="module_preset" value="$(var planning_module_preset)"/>
      <arg name="enable_all_modules_auto_mode" value="$(var enable_all_modules_auto_mode)"/>
      <arg name="is_simulation" value="$(var is_simulation)"/>
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>

    <!-- Relay node for trajectory topic -->
    <!-- This is a temporary addition for migration purposes. -->
    <!-- https://github.com/orgs/autowarefoundation/discussions/5033#discussioncomment-13704802 -->
    <node pkg="topic_tools" exec="relay" name="trajectory_relay">
      <param name="input_topic" value="/planning/trajectory"/>
      <param name="output_topic" value="/planning/scenario_planning/trajectory"/>
    </node>
  </group>

  <!-- Control -->
  <group if="$(var launch_control)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_control_component.launch.xml">
      <arg name="module_preset" value="$(var control_module_preset)"/>
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>

  <!-- API -->
  <group if="$(var launch_api)">
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_autoware_api_component.launch.xml">
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>

  <!-- Tools -->
  <group>
    <node
      pkg="rviz2"
      exec="rviz2"
      name="rviz2"
      output="screen"
      args="-d $(var rviz_config) -s $(find-pkg-share autoware_launch)/rviz/image/autoware.png"
      if="$(var rviz)"
      respawn="$(var rviz_respawn)"
    >
      <env name="QT_QPA_PLATFORMTHEME" value="qt5ct"/>
    </node>
  </group>
</launch>
